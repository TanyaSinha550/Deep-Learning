# -*- coding: utf-8 -*-
"""ANN_1_Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zfHs__87BMcNIMrCOe0Vu7pxEQT80qQf
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

dataset=pd.read_csv('/content/Churn_Modelling.csv')

X=dataset.iloc[:,3:13].values

Y=dataset.iloc[:,13].values

#Labelling is done to convert text into number
from sklearn.preprocessing import LabelEncoder,OneHotEncoder
labelencoder_X_1=LabelEncoder()
X[:,1]=labelencoder_X_1.fit_transform(X[:,1])
labelencoder_X_2=LabelEncoder()
X[:,2]=labelencoder_X_2.fit_transform(X[:,2])

from sklearn.compose import ColumnTransformer
# Country column
ct = ColumnTransformer([("Geography", OneHotEncoder(), [1])], remainder = 'passthrough')
X = ct.fit_transform(X)

X=X[:,1:]

#Splitting the Dataset
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

#Importing the Keras Libraries and packages
import keras
from keras.models import Sequential
from keras.layers import Dense

classifier=Sequential()

#Adding the Input Layer and the first Hidden Layer
classifier.add(Dense(units=6,kernel_initializer='uniform',activation='relu',input_dim=11))

#Adding the second Hidden Layer
classifier.add(Dense(units=6,kernel_initializer='uniform',activation='relu'))

#Adding the Output Layer
classifier.add(Dense(units=1,kernel_initializer='uniform',activation='sigmoid'))

classifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

classifier.fit(X_train,Y_train,batch_size=10,epochs=100)

y_pred = classifier.predict(X_test)
y_pred = (y_pred > 0.5)

y_pred

#Using single observation to check the result
new_prediction=classifier.predict(sc.transform(np.array([[0.0,0,600,1,40,3,6000,2,1,1,5000]])))
new_prediction=(new_prediction>0.5)

new_prediction